{"version":3,"sources":["../aemSpaComponentMapping/webpack/universalModuleDefinition","../aemSpaComponentMapping/src/ComponentMapping.ts","../aemSpaComponentMapping/webpack/bootstrap","../aemSpaComponentMapping/webpack/startup","../webpack:/aemSpaComponentMapping/webpack/runtime/define property getters","../webpack:/aemSpaComponentMapping/webpack/runtime/hasOwnProperty shorthand","../webpack:/aemSpaComponentMapping/webpack/runtime/make namespace object","components/Text.js","components/Navigation.js","components/Page.js","components/SampleContent.js","components/AEMPage.js","App.js","serviceWorker.js","server/CustomModelClient.js","index.js"],"names":["factory","ComponentMappingImpl","__webpack_require__","TextEditConfig","emptyLabel","isEmpty","props","text","trim","length","resourceType","Text","cqPath","richText","className","id","substr","lastIndexOf","data-rte-editelement","dangerouslySetInnerHTML","__html","Navigation","withMappable","items","getRecursiveNavigationContent","item","childItems","url","children","map","childItem","key","title","classes","nav_item","href","getLink","nav_container","Page","MapTo","ResponsiveGrid","SampleContent2","AEMPage","style","margin","pagePath","App","Boolean","window","location","hostname","match","FETCH_CONFIG","headers","Authorization","localStorage","getItem","modelClient","modelPath","err","Promise","reject","Error","this","_apiHost","fetch","then","response","status","json","error","statusText","ModelClient","process","ModelManager","initializeAsync","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2664c764.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aemSpaComponentMapping\"] = factory();\n\telse\n\t\troot[\"aemSpaComponentMapping\"] = factory();\n})((function(){ try{ return typeof self !== 'undefined';}catch(err){return false;}})() ? self : this, function() {\nreturn ","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/**\n * ComponentMapping instance.\n * @private\n */\nlet instance;\n/**\n * ComponentMapping singleton. It manages the mapping between AEM component resource types and corresponding\n * JavaScript component class.\n * @private\n */\nclass ComponentMappingImpl {\n    constructor() {\n        if (!instance) {\n            instance = this;\n        }\n        return instance;\n    }\n    static get instance() {\n        return new this();\n    }\n    /**\n     * Creates mapping for given resource type(s) and a component class.\n     * @param resourceTypes Resource type(s).\n     * @param clazz Component class that will be associated with given resource type(s).\n     * @protected\n     */\n    map(resourceTypes, clazz) {\n        ComponentMappingImpl.map(resourceTypes, clazz);\n    }\n    /**\n     * Creates mapping for given resource type(s) and a component class.\n     * @param resourceTypes Resource type(s).\n     * @param clazz Component class that will be associated with given resource type(s).\n     * @protected\n     */\n    static map(resourceTypes, clazz) {\n        if (resourceTypes && clazz) {\n            const resourceList = (typeof resourceTypes === 'string') ? [resourceTypes] : resourceTypes;\n            resourceList.forEach((entry) => {\n                this.mapping[entry] = clazz;\n            });\n        }\n    }\n    /**\n     * Returns object (or `undefined`) matching with given resource type.\n     * @param resourceType Resource type.\n     * @returns Class associated with given resource type or `undefined`.\n     */\n    get(resourceType) {\n        return ComponentMappingImpl.get(resourceType);\n    }\n    /**\n     * Returns object (or `undefined`) matching with given resource type.\n     * @param resourceType Resource type.\n     * @returns Class associated with given resource type or `undefined`.\n     */\n    static get(resourceType) {\n        return this.mapping[resourceType];\n    }\n}\nComponentMappingImpl.mapping = {};\n/**\n * Use to register resource types to Class mapping.\n *\n * Example:\n * ```\n * import { MapTo } from '@adobe/aem-spa-component-mapping';\n *\n * class MyComponent {\n *  ...\n * }\n *\n * export default MapTo('my/resource/type')(MyComponent);\n * ```\n *\n * @param resourceTypes AEM resource type(s).\n * @returns Function mapping a class with the given resource types.\n */\nconst MapTo = (resourceTypes) => {\n    return (clazz) => ComponentMappingImpl.instance.map(resourceTypes, clazz);\n};\nexport { ComponentMappingImpl as ComponentMapping, MapTo };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./src/types.ts\");\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import React from 'react';\nimport '../styles/common.css';\nimport { withMappable } from '@adobe/aem-react-editable-components';\n\nexport const TextEditConfig = {\n    emptyLabel: 'Text',\n    isEmpty: function(props) {\n        return !props || !props.text || props.text.trim().length < 1;\n    },\n    resourceType: \"wknd-spa-react/components/text\"\n};\n\nconst Text = ({ cqPath, richText, text }) => {\n    const richTextContent = () => (\n        <div className=\"aem_text\" id={cqPath.substr(cqPath.lastIndexOf('/') + 1)} data-rte-editelement dangerouslySetInnerHTML={{__html: text}}/>\n    );\n    return richText ? richTextContent() : (<div className=\"aem_text\">{text}</div>);\n};\n\nexport default Text;\n\nexport const AEMText = withMappable(Text, TextEditConfig);\n","import React from 'react';\nimport classes from '../styles/common.css';\n\nconst Navigation = ({ items }) => {\n    const getLink = (item) => {\n        if (!item || !item.url || !item.title) {\n            return;\n        }\n\n        return <a className={classes.nav_item} href={ item.url }>{ item.title }</a>;\n    }\n\n    const getRecursiveNavigationContent = (item) => {\n        if (!item || !item.url) {\n            return;\n        }\n\n        let childItems;\n\n        if (item.children && item.children.length) {\n            childItems = <ul>\n                { item.children && item.children.map((childItem) => {\n                    return getRecursiveNavigationContent(childItem);\n                })\n                }</ul>;\n        }\n\n        return <li key={ item.url }>\n            {getLink(item)}\n            {childItems}\n        </li>;\n    }\n\n    return (\n        <header>\n            <nav>\n                <ul className={classes.nav_container}>\n                    { items && items.map((item) =>\n                        getRecursiveNavigationContent(item))\n                    }\n                </ul>\n            </nav>\n        </header>\n    );\n}\n\nexport default Navigation;\n","import { Page, MapTo, withMappable } from '@adobe/aem-react-editable-components';\nimport Text, { TextEditConfig } from './Text';\nimport Navigation from './Navigation';\nimport { ResponsiveGrid } from '@adobe/aem-react-editable-components';\n\nexport default withMappable(Page);\n\nMapTo('wknd-spa-react/components/text')(Text, TextEditConfig);\nMapTo('wknd-spa-react/components/header')(Navigation);\nMapTo('wcm/foundation/components/responsivegrid')(ResponsiveGrid);\n","import React from 'react';\nimport '../styles/common.css';\n\nexport const SampleContent1 = () => (\n    <div className=\"sample-content\">\n        <h4>SPA Sample Content</h4>\n        <p>\n            Now it is such a bizarrely improbable coincidence that anything so mind-bogglingly useful could have evolved purely by chance\n            that some thinkers have chosen to see it as the final and clinching proof of the non-existence of God.\n            The argument goes something like this: \"I refuse to prove that I exist,'\" says God, \"for proof denies faith, and without faith I am nothing.\"\n            \"But,\" says Man, \"The Babel fish is a dead giveaway, isn't it? It could not have evolved by chance. It proves you exist, and so therefore, by your own arguments, you don't. QED.\"\n            \"Oh dear,\" says God, \"I hadn't thought of that,\" and promptly vanishes in a puff of logic.\n            \"Oh, that was easy,\" says Man, and for an encore goes on to prove that black is white and gets himself killed on the next zebra crossing.\n        </p>\n    </div>\n);\n\nexport const SampleContent2 = () => (\n    <div className=\"sample-content\">\n        <h4>SPA Sample Content</h4>\n        <p>\n            A towel, [The Hitchhiker's Guide to the Galaxy] says, is about the most massively useful thing an interstellar hitchhiker can have.\n            Partly it has great practical value. You can wrap it around you for warmth as you bound across the cold moons of Jaglan Beta;\n            you can lie on it on the brilliant marble-sanded beaches of Santraginus V, inhaling the heady sea vapors; you can sleep under it\n            beneath the stars which shine so redly on the desert world of Kakrafoon; use it to sail a miniraft down the slow heavy River Moth;\n            wet it for use in hand-to-hand-combat; wrap it round your head to ward off noxious fumes or avoid the gaze of the Ravenous\n            Bugblatter Beast of Traal (such a mind-boggingly stupid animal, it assumes that if you can't see it, it can't see you);\n            you can wave your towel in emergencies as a distress signal, and of course dry yourself off with it if it still seems to be clean enough.\n        </p>\n    </div>\n);\n","import React from 'react';\nimport Page from './Page';\nimport { SampleContent2 } from './SampleContent';\n\nconst AEMPage = () => (\n    <main style={{margin: '10px'}}>\n        <h2>SPA + AEM Leaf Component</h2>\n        <SampleContent2 />\n\n        <h4>AEM Page</h4>\n        <Page\n          pagePath=\"/content/wknd-spa-react/us/en/home\" />\n    </main>\n);\n\nexport default AEMPage;\n","import React from 'react';\nimport './App.css';\n\nimport AEMPage from './components/AEMPage';\n\nconst App = () => {\n    return (\n      <div className=\"App\">\n        <AEMPage />\n    </div>\n);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ModelClient } from '@adobe/aem-spa-page-model-manager';\n\nconst FETCH_CONFIG = {\n    headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n};\n\n/**\n * Custom ModelClient meant to demonstrate how to customize the request sent to the remote server\n */\nexport class CustomModelClient extends ModelClient {\n\n    /**\n     * Fetches a model using the given a resource path\n     *\n     * @param {string} modelPath - Path to the model\n     * @return {*}\n     */\n    fetch(modelPath) {\n        if (!modelPath) {\n            const err = 'Fetching model rejected for path: ' + modelPath;\n            return Promise.reject(new Error(err));\n        }\n\n        // Either the API host has been provided or we make an absolute request relative to the current host\n        const url = `${this._apiHost}${modelPath}`;\n        return fetch(url, FETCH_CONFIG).then(function(response) {\n            if (response.status >= 200 && response.status < 300) {\n             return response.json();\n            } else {\n                const error = new Error('while fetching the model for url: ' + url, response.statusText || response.status);\n                error.response = response;\n                return Promise.reject(error);\n            }\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\"\nimport { ModelManager } from \"@adobe/aem-spa-page-model-manager\";\n\nimport { CustomModelClient } from './server/CustomModelClient';\n\n\nconst modelClient = new CustomModelClient(process.env.REACT_APP_AEM_HOST);\nModelManager.initializeAsync({\n    modelClient\n});\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}